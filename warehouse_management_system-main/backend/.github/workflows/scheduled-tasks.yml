name: Scheduled Tasks

on:
  schedule:
    # Stop development environment at 8 PM EST (Monday-Friday)
    - cron: '0 1 * * 2-6'  # 1 AM UTC = 8 PM EST
    # Start development environment at 8 AM EST (Monday-Friday)  
    - cron: '0 13 * * 1-5'  # 1 PM UTC = 8 AM EST
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'start'
        type: choice
        options:
        - start
        - stop
        - status

env:
  AWS_REGION: us-east-1
  ECS_SERVICE: inventory-service
  ECS_CLUSTER: inventory-cluster

jobs:
  manage-environment:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Determine action
      id: determine-action
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          if [ "${{ github.event.schedule }}" = "0 1 * * 2-6" ]; then
            echo "action=stop" >> $GITHUB_OUTPUT
          else
            echo "action=start" >> $GITHUB_OUTPUT
          fi
        else
          echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
        fi

    - name: Stop environment
      if: steps.determine-action.outputs.action == 'stop'
      run: |
        echo "Stopping development environment..."
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --desired-count 0
        echo "Environment stopped to save costs."

    - name: Start environment
      if: steps.determine-action.outputs.action == 'start'
      run: |
        echo "Starting development environment..."
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --desired-count 1
        echo "Environment started."

    - name: Check status
      if: steps.determine-action.outputs.action == 'status'
      run: |
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].{ServiceName:serviceName,Status:status,Running:runningCount,Desired:desiredCount}'
